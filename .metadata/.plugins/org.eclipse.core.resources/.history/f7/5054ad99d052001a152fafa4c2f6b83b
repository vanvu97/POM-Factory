package Utility;

import java.io.FileInputStream;
import java.io.FileOutputStream;

import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.eclipse.jetty.util.log.Log;

//import executionEngine.DriverScript;
import Test.DISKTest;

public class ExcelUU {
	private static XSSFSheet ExcelWSheet;
	private static XSSFWorkbook ExcelWBook;
	private static XSSFCell Cell;
	// private static XSSFRow Row;

	// This method is to set the File path and to open the Excel file
	// Pass Excel Path and SheetName as Arguments to this method
	public static void setExcelFile(String Path) throws Exception {
		try {
			FileInputStream ExcelFile = new FileInputStream(Path);
			ExcelWBook = new XSSFWorkbook(ExcelFile);
		} catch (Exception e) {
			Log.error("Class Utils | Method setExcelFile | Exception desc : " + e.getMessage());
			DISKTest.bResult = false;
		}
	}

	// This method is to read the test data from the Excel cell
	// In this we are passing Arguments as Row Num, Col Num & Sheet Name
	public static String getCellData(int RowNum, int ColNum, String SheetName) throws Exception {
		try {
			ExcelWSheet = ExcelWBook.getSheet(SheetName);
			Cell = ExcelWSheet.getRow(RowNum).getCell(ColNum);
			String CellData = Cell.getStringCellValue();
			return CellData;
		} catch (Exception e) {
			Log.error("Class Utils | Method getCellData | Exception desc : " + e.getMessage());
			// DriverScript.bResult = false;
			return "";
		}
	}

	// This method is to get the row count used of the excel sheet
	public static int getRowCount(String SheetName) {
		int iNumber = 0;
		try {
			ExcelWSheet = ExcelWBook.getSheet(SheetName);
			iNumber = ExcelWSheet.getLastRowNum() + 1;
		} catch (Exception e) {
			Log.error("Class Utils | Method getRowCount | Exception desc : " + e.getMessage());
			DISKTest.bResult = false;
		}
		return iNumber;
	}

	// This method is to get the Row number of the test case
	// This methods takes three arguments(Test Case name , Column Number & Sheet
	// name)
	public static int getRowContains(String sTestCaseName, int colNum, String SheetName) throws Exception {
		int iRowNum = 0;
		try {
			// ExcelWSheet = ExcelWBook.getSheet(SheetName);
			int rowCount = ExcelUU.getRowCount(SheetName);
			for (; iRowNum < rowCount; iRowNum++) {
				if (ExcelUU.getCellData(iRowNum, colNum, SheetName).equalsIgnoreCase(sTestCaseName)) {
					break;
				}
			}
		} catch (Exception e) {
			Log.error("Class Utils | Method getRowContains | Exception desc : " + e.getMessage());
			DISKTest.bResult = false;
		}
		return iRowNum;
	}

	// This method is to get the count of the test steps of test case
	// This method takes three arguments (Sheet name, Test Case Id & Test case row
	// number)
	public static int getTestStepsCount(String SheetName, String sTestCaseID, int iTestCaseStart) throws Exception {
		try {
			for (int i = iTestCaseStart; i <= ExcelUU.getRowCount(SheetName); i++) {
				if (!sTestCaseID.equals(ExcelUU.getCellData(i, Constants.Col_TestCaseID, SheetName))) {
					int number = i;
					return number;
				}
			}
			ExcelWSheet = ExcelWBook.getSheet(SheetName);
			int number = ExcelWSheet.getLastRowNum() + 1;
			return number;
		} catch (Exception e) {
			Log.error("Class Utils | Method getRowContains | Exception desc : " + e.getMessage());
			DISKTest.bResult = false;
			return 0;
		}
	}

	@SuppressWarnings("static-access")
	// This method is use to write value in the excel sheet
	// This method accepts four arguments (Result, Row Number, Column Number & Sheet
	// Name)
	public static void setCellData(String Result, int RowNum, int ColNum, String SheetName, String pathFile,
			String color) throws Exception {
		try {

			ExcelWSheet = ExcelWBook.getSheet(SheetName);
			XSSFRow Row = ExcelWSheet.getRow(RowNum);
			Cell = Row.getCell(ColNum, org.apache.poi.ss.usermodel.Row.RETURN_BLANK_AS_NULL);
			if (Cell == null) {
				Cell = Row.createCell(ColNum);
				Cell.setCellValue(Result);
			} else {
				Cell.setCellValue(Result);
			}

			// Set Cell Color
			XSSFCellStyle style = ExcelWBook.createCellStyle();
			if (color == "red") {
				style.setFillForegroundColor(IndexedColors.RED.getIndex());
				style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
			} else if (color == "blue") {
				style.setFillForegroundColor(IndexedColors.SKY_BLUE.getIndex());
				style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
			}
			Cell.setCellStyle(style);
			// Set Cell Color

			// Constant variables Test Data path and Test Data file name
			FileOutputStream fileOut = new FileOutputStream(pathFile);
// 				FileOutputStream fileOut = new FileOutputStream(chooser.getSelectedFile() + " ");
			ExcelWBook.write(fileOut);
			// fileOut.flush();
			fileOut.close();
			ExcelWBook = new XSSFWorkbook(new FileInputStream(pathFile));
// 				ExcelWBook = new XSSFWorkbook(new FileInputStream(chooser.getSelectedFile() + " "));
		} catch (Exception e) {
			DiWMS_AutoTest_GUI.bResult = false;
		}
	}
}
